#test test_sub
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x00000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x00000000;  // 1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x00000000;  // 12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -12345
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00003039;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x80000000;  // -1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x80000000;  // -12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 12345
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00003039;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -12344
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00003038;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 12346
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000303A;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -79228162514264337593543950334
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFE;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_sub(val1, val2, &val3);
ck_assert_int_eq(int_res, 1);

val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x00000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00010000;  // 0,5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000005;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x00000000;  // 1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x80010000;  // -0,5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000005;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x00000000;  // 12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x80010000;  // -12344,5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0001E235;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x80000000;  // -1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00010000;  // 1,5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000F;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x80000000;  // -12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00010000;  // 12345,5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0001E23F;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -79228162514264337593543950334
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFE;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_sub(val1, val2, &val3);
ck_assert_int_eq(int_res, 1);

val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00090000;  // 0,000000001
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x80090000;  // -0,999999999
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x3B9AC9FF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x80090000;  // -12344,999999999
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000B3A;
val_ans.bits[0] = 0x4B56F9FF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00090000;  // 1,000000001
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x3B9ACA01;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00090000;  // 12345,000000001
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000B3A;
val_ans.bits[0] = 0x4B56FA01;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950334
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFE;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950334
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFE;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950334
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFE;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000004
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000004;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950334
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFE;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950334
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFE;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000005
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000005;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950334
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFE;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950334
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFE;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000006
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000006;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950334
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFE;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950334
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFE;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000009
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000009;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950334
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFE;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950334
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFE;
val2.bits[3] = 0x001A0000;  // 0,00000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950334
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFE;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000004
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000004;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000005
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000005;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000006
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000006;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000009
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000009;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x001A0000;  // 0,00000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_sub(val1, val2, &val3);
ck_assert_int_eq(int_res, 1);

val1.bits[3] = 0x00000000;  // 9999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val2.bits[3] = 0x00000000;  // 9999999999999999999999999999
val2.bits[2] = 0x204FCE5E;
val2.bits[1] = 0x3E250261;
val2.bits[0] = 0x0FFFFFFF;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00080000;  // 9999999,99999999
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00038D7E;
val1.bits[0] = 0xA4C67FFF;
val2.bits[3] = 0x00090000;  // 9999999,999999999
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x002386F2;
val2.bits[0] = 0x6FC0FFFF;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x80090000;  // -0,000000009
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000009;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00050000;  // 99999999999999999999999,99999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val2.bits[3] = 0x00170000;  // 99999,99999999999999999999999
val2.bits[2] = 0x204FCE5E;
val2.bits[1] = 0x3E250261;
val2.bits[0] = 0x0FFFFFFF;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00050000;  // 99999999999999999899999,99999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E25025E;
val_ans.bits[0] = 0xBBF41BFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_sub(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

