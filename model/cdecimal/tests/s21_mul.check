#test test_mul0
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x00000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul1
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x00000000;  // 1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul2
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x00000000;  // 12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul3
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x80000000;  // -1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul4
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x80000000;  // -12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul5
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul6
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul7
val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul8
val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul9
val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 12345
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00003039;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul10
val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul11
val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -12345
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00003039;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul12
val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul13
val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul14
val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x00000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul15
val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x00000000;  // 1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00010000;  // 0,5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000005;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul16
val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x00000000;  // 12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00010000;  // 6172,5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000F11D;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul17
val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x80000000;  // -1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x80010000;  // -0,5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000005;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul18
val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x80000000;  // -12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x80010000;  // -6172,5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000F11D;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul19
val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 39614081257132168796771975168
val_ans.bits[2] = 0x80000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul20
val1.bits[3] = 0x00010000;  // 0,5
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000005;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -39614081257132168796771975168
val_ans.bits[2] = 0x80000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul21
val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul22
val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00090000;  // 0,000000001
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul23
val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00090000;  // 0,000012345
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00003039;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul24
val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x80090000;  // -0,000000001
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul25
val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -12345
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00003039;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x80090000;  // -0,000012345
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00003039;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul26
val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00090000;  // 79228162514264337593,543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul27
val1.bits[3] = 0x00090000;  // 0,000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x80090000;  // -79228162514264337593,543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul28
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x00000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul29
val1.bits[3] = 0x80000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x00000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul30
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x80000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul31
val1.bits[3] = 0x80000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x80000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul32
val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul33
val1.bits[3] = 0x80000000;  // -1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul34
val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul35
val1.bits[3] = 0x80000000;  // -1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -1
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul36
val1.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul37
val1.bits[3] = 0x801B0000;  // -0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul38
val1.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x801B0000;  // -0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul39
val1.bits[3] = 0x801B0000;  // -0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x801B0000;  // -0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul40
val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
ck_assert_int_eq(int_res, 1);

#test test_mul41
val1.bits[3] = 0x80000000;  // -79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
ck_assert_int_eq(int_res, 2);

#test test_mul42
val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
ck_assert_int_eq(int_res, 2);

#test test_mul43
val1.bits[3] = 0x80000000;  // -79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
ck_assert_int_eq(int_res, 1);

#test test_mul44
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul45
val1.bits[3] = 0x80000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul46
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul47
val1.bits[3] = 0x80000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul48
val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x00000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul49
val1.bits[3] = 0x80000000;  // -79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x00000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul50
val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x80000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul51
val1.bits[3] = 0x80000000;  // -79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x80000000;  // 0
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000000;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul52
val1.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x001B0000;  // 79,228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul53
val1.bits[3] = 0x801B0000;  // -0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x801B0000;  // -79,228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul54
val1.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x801B0000;  // -79,228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul55
val1.bits[3] = 0x801B0000;  // -0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x001B0000;  // 79,228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul56
val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x001B0000;  // 79,228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul57
val1.bits[3] = 0x80000000;  // -79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x801B0000;  // -79,228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul58
val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x801B0000;  // -0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x801B0000;  // -79,228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul59
val1.bits[3] = 0x80000000;  // -79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x801B0000;  // -0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x001B0000;  // 79,228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul60
val1.bits[3] = 0x00000000;  // 9
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000009;
val2.bits[3] = 0x00000000;  // 10
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x0000000A;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 90
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000005A;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul61
val1.bits[3] = 0x00000000;  // 9
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000009;
val2.bits[3] = 0x00000000;  // 10
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x0000000A;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 90
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000005A;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul62
val1.bits[3] = 0x00000000;  // 9
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000009;
val2.bits[3] = 0x00000000;  // 10
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x0000000A;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 90
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000005A;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul63
val1.bits[3] = 0x00000000;  // 9
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000009;
val2.bits[3] = 0x00000000;  // 10
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x0000000A;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 90
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000005A;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul64
val1.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000002
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000002;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul65
val1.bits[3] = 0x801B0000;  // -0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000002
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000002;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul66
val1.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x801B0000;  // -0,000000000000000000000000002
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000002;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul67
val1.bits[3] = 0x801B0000;  // -0,000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val2.bits[3] = 0x801B0000;  // -0,000000000000000000000000002
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000002;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul68
val1.bits[3] = 0x001B0000;  // 0,000000000000000000000000002
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000002;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul69
val1.bits[3] = 0x801B0000;  // -0,000000000000000000000000002
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000002;
val2.bits[3] = 0x001B0000;  // 0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul70
val1.bits[3] = 0x001B0000;  // 0,000000000000000000000000002
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000002;
val2.bits[3] = 0x801B0000;  // -0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul71
val1.bits[3] = 0x801B0000;  // -0,000000000000000000000000002
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000002;
val2.bits[3] = 0x801B0000;  // -0,000000000000000000000000001
val2.bits[2] = 0x00000000;
val2.bits[1] = 0x00000000;
val2.bits[0] = 0x00000001;
int_res = s21_mul(val1, val2, &val3);
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
ck_assert_mem_eq(&val3, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test test_mul72
val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950334
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFE;
int_res = s21_mul(val1, val2, &val3);
ck_assert_int_eq(int_res, 1);

#test test_mul73
val1.bits[3] = 0x80000000;  // -79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950334
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFE;
int_res = s21_mul(val1, val2, &val3);
ck_assert_int_eq(int_res, 2);

#test test_mul74
val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950334
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFE;
int_res = s21_mul(val1, val2, &val3);
ck_assert_int_eq(int_res, 2);

#test test_mul75
val1.bits[3] = 0x80000000;  // -79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950334
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFE;
int_res = s21_mul(val1, val2, &val3);
ck_assert_int_eq(int_res, 1);

#test test_mul76
val1.bits[3] = 0x00000000;  // 79228162514264337593543950334
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFE;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
ck_assert_int_eq(int_res, 1);

#test test_mul77
val1.bits[3] = 0x80000000;  // -79228162514264337593543950334
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFE;
val2.bits[3] = 0x00000000;  // 79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
ck_assert_int_eq(int_res, 2);

#test test_mul78
val1.bits[3] = 0x00000000;  // 79228162514264337593543950334
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFE;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
ck_assert_int_eq(int_res, 2);

#test test_mul79
val1.bits[3] = 0x80000000;  // -79228162514264337593543950334
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFE;
val2.bits[3] = 0x80000000;  // -79228162514264337593543950335
val2.bits[2] = 0xFFFFFFFF;
val2.bits[1] = 0xFFFFFFFF;
val2.bits[0] = 0xFFFFFFFF;
int_res = s21_mul(val1, val2, &val3);
ck_assert_int_eq(int_res, 1);