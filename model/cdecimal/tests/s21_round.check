#test test_round
val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 9999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 9999999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00010000;  // 7922816251426433759354395033,5
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251426433759354395034
val_ans.bits[2] = 0x19999999;
val_ans.bits[1] = 0x99999999;
val_ans.bits[0] = 0x9999999A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00020000;  // 792281625142643375935439503,35
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625142643375935439503
val_ans.bits[2] = 0x028F5C28;
val_ans.bits[1] = 0xF5C28F5C;
val_ans.bits[0] = 0x28F5C28F;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00030000;  // 79228162514264337593543950,335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950
val_ans.bits[2] = 0x00418937;
val_ans.bits[1] = 0x4BC6A7EF;
val_ans.bits[0] = 0x9DB22D0E;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00040000;  // 7922816251426433759354395,0335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251426433759354395
val_ans.bits[2] = 0x00068DB8;
val_ans.bits[1] = 0xBAC710CB;
val_ans.bits[0] = 0x295E9E1B;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00050000;  // 792281625142643375935439,50335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625142643375935440
val_ans.bits[2] = 0x0000A7C5;
val_ans.bits[1] = 0xAC471B47;
val_ans.bits[0] = 0x84230FD0;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00060000;  // 79228162514264337593543,950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264337593544
val_ans.bits[2] = 0x000010C6;
val_ans.bits[1] = 0xF7A0B5ED;
val_ans.bits[0] = 0x8D36B4C8;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00070000;  // 7922816251426433759354,3950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251426433759354
val_ans.bits[2] = 0x000001AD;
val_ans.bits[1] = 0x7F29ABCA;
val_ans.bits[0] = 0xF485787A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00080000;  // 792281625142643375935,43950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625142643375935
val_ans.bits[2] = 0x0000002A;
val_ans.bits[1] = 0xF31DC461;
val_ans.bits[0] = 0x1873BF3F;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00090000;  // 79228162514264337593,543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264337594
val_ans.bits[2] = 0x00000004;
val_ans.bits[1] = 0x4B82FA09;
val_ans.bits[0] = 0xB5A52CBA;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000A0000;  // 7922816251426433759,3543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251426433759
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x6DF37F67;
val_ans.bits[0] = 0x5EF6EADF;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000B0000;  // 792281625142643375,93543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625142643376
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x0AFEBFF0;
val_ans.bits[0] = 0xBCB24AB0;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000C0000;  // 79228162514264337,593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264338
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x01197998;
val_ans.bits[0] = 0x12DEA112;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000D0000;  // 7922816251426433,7593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251426434
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x001C25C2;
val_ans.bits[0] = 0x68497682;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000E0000;  // 792281625142643,37593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625142643
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x0002D093;
val_ans.bits[0] = 0x70D42573;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000F0000;  // 79228162514264,337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x0000480E;
val_ans.bits[0] = 0xBE7B9D58;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00100000;  // 7922816251426,4337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251426
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000734;
val_ans.bits[0] = 0xACA5F622;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00110000;  // 792281625142,64337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625143
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x000000B8;
val_ans.bits[0] = 0x77AA3237;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00120000;  // 79228162514,264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000012;
val_ans.bits[0] = 0x725DD1D2;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00130000;  // 7922816251,4264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000001;
val_ans.bits[0] = 0xD83C94FB;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00140000;  // 792281625,14264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x2F394219;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00150000;  // 79228162,514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228163
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x04B8ED03;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00160000;  // 7922816,2514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0078E480;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00170000;  // 792281,62514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792282
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000C16DA;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00180000;  // 79228,162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0001357C;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00190000;  // 7922,8162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7923
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00001EF3;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001A0000;  // 792,28162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000318;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 79,228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000004F;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 7,9228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,1000000000000000000000000000
val1.bits[2] = 0x033B2E3C;
val1.bits[1] = 0x9FD0803C;
val1.bits[0] = 0xE8000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0100000000000000000000000000
val1.bits[2] = 0x0052B7D2;
val1.bits[1] = 0xDCC80CD2;
val1.bits[0] = 0xE4000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0010000000000000000000000000
val1.bits[2] = 0x00084595;
val1.bits[1] = 0x16140148;
val1.bits[0] = 0x4A000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0001000000000000000000000000
val1.bits[2] = 0x0000D3C2;
val1.bits[1] = 0x1BCECCED;
val1.bits[0] = 0xA1000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000100000000000000000000000
val1.bits[2] = 0x0000152D;
val1.bits[1] = 0x02C7E14A;
val1.bits[0] = 0xF6800000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000010000000000000000000000
val1.bits[2] = 0x0000021E;
val1.bits[1] = 0x19E0C9BA;
val1.bits[0] = 0xB2400000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000001000000000000000000000
val1.bits[2] = 0x00000036;
val1.bits[1] = 0x35C9ADC5;
val1.bits[0] = 0xDEA00000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000100000000000000000000
val1.bits[2] = 0x00000005;
val1.bits[1] = 0x6BC75E2D;
val1.bits[0] = 0x63100000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000010000000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x8AC72304;
val1.bits[0] = 0x89E80000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000001000000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x0DE0B6B3;
val1.bits[0] = 0xA7640000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000100000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x01634578;
val1.bits[0] = 0x5D8A0000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000010000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x002386F2;
val1.bits[0] = 0x6FC10000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000001000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00038D7E;
val1.bits[0] = 0xA4C68000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000000100000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00005AF3;
val1.bits[0] = 0x107A4000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000000010000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000918;
val1.bits[0] = 0x4E72A000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 9,999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001A0000;  // 99,99999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 100
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000064;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00190000;  // 999,9999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 1000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000003E8;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00180000;  // 9999,999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 10000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00002710;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00170000;  // 99999,99999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 100000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000186A0;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00160000;  // 999999,9999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 1000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000F4240;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00150000;  // 9999999,999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 10000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00989680;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00140000;  // 99999999,99999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 100000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x05F5E100;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00130000;  // 999999999,9999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 1000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x3B9ACA00;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00120000;  // 9999999999,999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 10000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000002;
val_ans.bits[0] = 0x540BE400;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00110000;  // 99999999999,99999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 100000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000017;
val_ans.bits[0] = 0x4876E800;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00100000;  // 999999999999,9999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 1000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x000000E8;
val_ans.bits[0] = 0xD4A51000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000F0000;  // 9999999999999,999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 10000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000918;
val_ans.bits[0] = 0x4E72A000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000E0000;  // 99999999999999,99999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 100000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00005AF3;
val_ans.bits[0] = 0x107A4000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000D0000;  // 999999999999999,9999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 1000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00038D7E;
val_ans.bits[0] = 0xA4C68000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000C0000;  // 9999999999999999,999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 10000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x002386F2;
val_ans.bits[0] = 0x6FC10000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000B0000;  // 99999999999999999,99999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 100000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x01634578;
val_ans.bits[0] = 0x5D8A0000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,4999999999999999999999999999
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x87FFFFFF;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,5000000000000000000000000000
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x88000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,5000000000000000000000000001
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x88000001;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 1,4999999999999999999999999999
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x97FFFFFF;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 1,5000000000000000000000000000
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000000;
val_ans.bits[3] = 0x00000000;  // 2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 1,5000000000000000000000000001
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000001;
val_ans.bits[3] = 0x00000000;  // 2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 2,4999999999999999999999999999
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA7FFFFFF;
val_ans.bits[3] = 0x00000000;  // 2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 2,5000000000000000000000000000
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA8000000;
val_ans.bits[3] = 0x00000000;  // 2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 2,5000000000000000000000000001
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA8000001;
val_ans.bits[3] = 0x00000000;  // 3
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000003;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 3,4999999999999999999999999999
val1.bits[2] = 0x71175249;
val1.bits[1] = 0xD9818853;
val1.bits[0] = 0xB7FFFFFF;
val_ans.bits[3] = 0x00000000;  // 3
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000003;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 3,5000000000000000000000000000
val1.bits[2] = 0x71175249;
val1.bits[1] = 0xD9818853;
val1.bits[0] = 0xB8000000;
val_ans.bits[3] = 0x00000000;  // 4
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000004;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 3,5000000000000000000000000001
val1.bits[2] = 0x71175249;
val1.bits[1] = 0xD9818853;
val1.bits[0] = 0xB8000001;
val_ans.bits[3] = 0x00000000;  // 4
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000004;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 4,4999999999999999999999999999
val1.bits[2] = 0x916720A8;
val1.bits[1] = 0x17A68AB4;
val1.bits[0] = 0xC7FFFFFF;
val_ans.bits[3] = 0x00000000;  // 4
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000004;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 4,5000000000000000000000000000
val1.bits[2] = 0x916720A8;
val1.bits[1] = 0x17A68AB4;
val1.bits[0] = 0xC8000000;
val_ans.bits[3] = 0x00000000;  // 4
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000004;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 4,5000000000000000000000000001
val1.bits[2] = 0x916720A8;
val1.bits[1] = 0x17A68AB4;
val1.bits[0] = 0xC8000001;
val_ans.bits[3] = 0x00000000;  // 5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000005;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 5,4999999999999999999999999999
val1.bits[2] = 0xB1B6EF06;
val1.bits[1] = 0x55CB8D15;
val1.bits[0] = 0xD7FFFFFF;
val_ans.bits[3] = 0x00000000;  // 5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000005;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 5,5000000000000000000000000000
val1.bits[2] = 0xB1B6EF06;
val1.bits[1] = 0x55CB8D15;
val1.bits[0] = 0xD8000000;
val_ans.bits[3] = 0x00000000;  // 6
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000006;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 5,5000000000000000000000000001
val1.bits[2] = 0xB1B6EF06;
val1.bits[1] = 0x55CB8D15;
val1.bits[0] = 0xD8000001;
val_ans.bits[3] = 0x00000000;  // 6
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000006;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 6,4999999999999999999999999999
val1.bits[2] = 0xD206BD64;
val1.bits[1] = 0x93F08F76;
val1.bits[0] = 0xE7FFFFFF;
val_ans.bits[3] = 0x00000000;  // 6
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000006;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 6,5000000000000000000000000000
val1.bits[2] = 0xD206BD64;
val1.bits[1] = 0x93F08F76;
val1.bits[0] = 0xE8000000;
val_ans.bits[3] = 0x00000000;  // 6
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000006;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 6,5000000000000000000000000001
val1.bits[2] = 0xD206BD64;
val1.bits[1] = 0x93F08F76;
val1.bits[0] = 0xE8000001;
val_ans.bits[3] = 0x00000000;  // 7
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000007;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 7,4999999999999999999999999999
val1.bits[2] = 0xF2568BC2;
val1.bits[1] = 0xD21591D7;
val1.bits[0] = 0xF7FFFFFF;
val_ans.bits[3] = 0x00000000;  // 7
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000007;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 7,5000000000000000000000000000
val1.bits[2] = 0xF2568BC2;
val1.bits[1] = 0xD21591D7;
val1.bits[0] = 0xF8000000;
val_ans.bits[3] = 0x00000000;  // 8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 7,5000000000000000000000000001
val1.bits[2] = 0xF2568BC2;
val1.bits[1] = 0xD21591D7;
val1.bits[0] = 0xF8000001;
val_ans.bits[3] = 0x00000000;  // 8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 8,500000000000000000000000000
val1.bits[2] = 0x1B770903;
val1.bits[1] = 0x4E6C4205;
val1.bits[0] = 0xB4000000;
val_ans.bits[3] = 0x00000000;  // 8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 8,500000000000000000000000000
val1.bits[2] = 0x1B770903;
val1.bits[1] = 0x4E6C4205;
val1.bits[0] = 0xB4000000;
val_ans.bits[3] = 0x00000000;  // 8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 8,500000000000000000000000000
val1.bits[2] = 0x1B770903;
val1.bits[1] = 0x4E6C4205;
val1.bits[0] = 0xB4000000;
val_ans.bits[3] = 0x00000000;  // 8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 9,500000000000000000000000000
val1.bits[2] = 0x1EB2373F;
val1.bits[1] = 0xEE3CC242;
val1.bits[0] = 0x9C000000;
val_ans.bits[3] = 0x00000000;  // 10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 9,500000000000000000000000000
val1.bits[2] = 0x1EB2373F;
val1.bits[1] = 0xEE3CC242;
val1.bits[0] = 0x9C000000;
val_ans.bits[3] = 0x00000000;  // 10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 9,500000000000000000000000000
val1.bits[2] = 0x1EB2373F;
val1.bits[1] = 0xEE3CC242;
val1.bits[0] = 0x9C000000;
val_ans.bits[3] = 0x00000000;  // 10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00090000;  // 0,123456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00080000;  // 1,23456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00070000;  // 12,3456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 12
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000C;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00060000;  // 123,456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 123
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000007B;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00050000;  // 1234,56789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 1235
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000004D3;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00040000;  // 12345,6789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 12346
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000303A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00030000;  // 123456,789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 123457
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0001E241;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00020000;  // 1234567,89
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 1234568
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0012D688;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00010000;  // 12345678,9
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 12345679
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00BC614F;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 123456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 123456789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 123456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 123456789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -9999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -9999999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80010000;  // -7922816251426433759354395033,5
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816251426433759354395034
val_ans.bits[2] = 0x19999999;
val_ans.bits[1] = 0x99999999;
val_ans.bits[0] = 0x9999999A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80020000;  // -792281625142643375935439503,35
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792281625142643375935439503
val_ans.bits[2] = 0x028F5C28;
val_ans.bits[1] = 0xF5C28F5C;
val_ans.bits[0] = 0x28F5C28F;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80030000;  // -79228162514264337593543950,335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228162514264337593543950
val_ans.bits[2] = 0x00418937;
val_ans.bits[1] = 0x4BC6A7EF;
val_ans.bits[0] = 0x9DB22D0E;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80040000;  // -7922816251426433759354395,0335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816251426433759354395
val_ans.bits[2] = 0x00068DB8;
val_ans.bits[1] = 0xBAC710CB;
val_ans.bits[0] = 0x295E9E1B;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80050000;  // -792281625142643375935439,50335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792281625142643375935440
val_ans.bits[2] = 0x0000A7C5;
val_ans.bits[1] = 0xAC471B47;
val_ans.bits[0] = 0x84230FD0;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80060000;  // -79228162514264337593543,950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228162514264337593544
val_ans.bits[2] = 0x000010C6;
val_ans.bits[1] = 0xF7A0B5ED;
val_ans.bits[0] = 0x8D36B4C8;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80070000;  // -7922816251426433759354,3950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816251426433759354
val_ans.bits[2] = 0x000001AD;
val_ans.bits[1] = 0x7F29ABCA;
val_ans.bits[0] = 0xF485787A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80080000;  // -792281625142643375935,43950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792281625142643375935
val_ans.bits[2] = 0x0000002A;
val_ans.bits[1] = 0xF31DC461;
val_ans.bits[0] = 0x1873BF3F;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80090000;  // -79228162514264337593,543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228162514264337594
val_ans.bits[2] = 0x00000004;
val_ans.bits[1] = 0x4B82FA09;
val_ans.bits[0] = 0xB5A52CBA;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800A0000;  // -7922816251426433759,3543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816251426433759
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x6DF37F67;
val_ans.bits[0] = 0x5EF6EADF;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800B0000;  // -792281625142643375,93543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792281625142643376
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x0AFEBFF0;
val_ans.bits[0] = 0xBCB24AB0;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800C0000;  // -79228162514264337,593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228162514264338
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x01197998;
val_ans.bits[0] = 0x12DEA112;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800D0000;  // -7922816251426433,7593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816251426434
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x001C25C2;
val_ans.bits[0] = 0x68497682;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800E0000;  // -792281625142643,37593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792281625142643
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x0002D093;
val_ans.bits[0] = 0x70D42573;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800F0000;  // -79228162514264,337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228162514264
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x0000480E;
val_ans.bits[0] = 0xBE7B9D58;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80100000;  // -7922816251426,4337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816251426
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000734;
val_ans.bits[0] = 0xACA5F622;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80110000;  // -792281625142,64337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792281625143
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x000000B8;
val_ans.bits[0] = 0x77AA3237;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80120000;  // -79228162514,264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228162514
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000012;
val_ans.bits[0] = 0x725DD1D2;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80130000;  // -7922816251,4264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816251
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000001;
val_ans.bits[0] = 0xD83C94FB;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80140000;  // -792281625,14264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792281625
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x2F394219;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80150000;  // -79228162,514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228163
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x04B8ED03;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80160000;  // -7922816,2514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0078E480;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80170000;  // -792281,62514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792282
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000C16DA;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80180000;  // -79228,162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0001357C;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80190000;  // -7922,8162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7923
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00001EF3;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801A0000;  // -792,28162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000318;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -79,228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000004F;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,9228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,1000000000000000000000000000
val1.bits[2] = 0x033B2E3C;
val1.bits[1] = 0x9FD0803C;
val1.bits[0] = 0xE8000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0100000000000000000000000000
val1.bits[2] = 0x0052B7D2;
val1.bits[1] = 0xDCC80CD2;
val1.bits[0] = 0xE4000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0010000000000000000000000000
val1.bits[2] = 0x00084595;
val1.bits[1] = 0x16140148;
val1.bits[0] = 0x4A000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0001000000000000000000000000
val1.bits[2] = 0x0000D3C2;
val1.bits[1] = 0x1BCECCED;
val1.bits[0] = 0xA1000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000100000000000000000000000
val1.bits[2] = 0x0000152D;
val1.bits[1] = 0x02C7E14A;
val1.bits[0] = 0xF6800000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000010000000000000000000000
val1.bits[2] = 0x0000021E;
val1.bits[1] = 0x19E0C9BA;
val1.bits[0] = 0xB2400000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000001000000000000000000000
val1.bits[2] = 0x00000036;
val1.bits[1] = 0x35C9ADC5;
val1.bits[0] = 0xDEA00000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000100000000000000000000
val1.bits[2] = 0x00000005;
val1.bits[1] = 0x6BC75E2D;
val1.bits[0] = 0x63100000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000010000000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x8AC72304;
val1.bits[0] = 0x89E80000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000001000000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x0DE0B6B3;
val1.bits[0] = 0xA7640000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000100000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x01634578;
val1.bits[0] = 0x5D8A0000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000010000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x002386F2;
val1.bits[0] = 0x6FC10000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000001000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00038D7E;
val1.bits[0] = 0xA4C68000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000000100000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00005AF3;
val1.bits[0] = 0x107A4000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000000010000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000918;
val1.bits[0] = 0x4E72A000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -9,999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801A0000;  // -99,99999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -100
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000064;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80190000;  // -999,9999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -1000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000003E8;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80180000;  // -9999,999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -10000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00002710;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80170000;  // -99999,99999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -100000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000186A0;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80160000;  // -999999,9999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -1000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000F4240;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80150000;  // -9999999,999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -10000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00989680;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80140000;  // -99999999,99999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -100000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x05F5E100;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80130000;  // -999999999,9999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -1000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x3B9ACA00;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80120000;  // -9999999999,999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -10000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000002;
val_ans.bits[0] = 0x540BE400;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80110000;  // -99999999999,99999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -100000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000017;
val_ans.bits[0] = 0x4876E800;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80100000;  // -999999999999,9999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -1000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x000000E8;
val_ans.bits[0] = 0xD4A51000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800F0000;  // -9999999999999,999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -10000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000918;
val_ans.bits[0] = 0x4E72A000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800E0000;  // -99999999999999,99999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -100000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00005AF3;
val_ans.bits[0] = 0x107A4000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800D0000;  // -999999999999999,9999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -1000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00038D7E;
val_ans.bits[0] = 0xA4C68000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800C0000;  // -9999999999999999,999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -10000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x002386F2;
val_ans.bits[0] = 0x6FC10000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800B0000;  // -99999999999999999,99999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -100000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x01634578;
val_ans.bits[0] = 0x5D8A0000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,4999999999999999999999999999
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x87FFFFFF;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,5000000000000000000000000000
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x88000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,5000000000000000000000000001
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x88000001;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -1,4999999999999999999999999999
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x97FFFFFF;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -1,5000000000000000000000000000
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000000;
val_ans.bits[3] = 0x80000000;  // -2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -1,5000000000000000000000000001
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000001;
val_ans.bits[3] = 0x80000000;  // -2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -2,4999999999999999999999999999
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -2,5000000000000000000000000000
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA8000000;
val_ans.bits[3] = 0x80000000;  // -2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -2,5000000000000000000000000001
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA8000001;
val_ans.bits[3] = 0x80000000;  // -3
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000003;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -3,4999999999999999999999999999
val1.bits[2] = 0x71175249;
val1.bits[1] = 0xD9818853;
val1.bits[0] = 0xB7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -3
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000003;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -3,5000000000000000000000000000
val1.bits[2] = 0x71175249;
val1.bits[1] = 0xD9818853;
val1.bits[0] = 0xB8000000;
val_ans.bits[3] = 0x80000000;  // -4
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000004;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -3,5000000000000000000000000001
val1.bits[2] = 0x71175249;
val1.bits[1] = 0xD9818853;
val1.bits[0] = 0xB8000001;
val_ans.bits[3] = 0x80000000;  // -4
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000004;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -4,4999999999999999999999999999
val1.bits[2] = 0x916720A8;
val1.bits[1] = 0x17A68AB4;
val1.bits[0] = 0xC7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -4
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000004;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -4,5000000000000000000000000000
val1.bits[2] = 0x916720A8;
val1.bits[1] = 0x17A68AB4;
val1.bits[0] = 0xC8000000;
val_ans.bits[3] = 0x80000000;  // -4
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000004;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -4,5000000000000000000000000001
val1.bits[2] = 0x916720A8;
val1.bits[1] = 0x17A68AB4;
val1.bits[0] = 0xC8000001;
val_ans.bits[3] = 0x80000000;  // -5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000005;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -5,4999999999999999999999999999
val1.bits[2] = 0xB1B6EF06;
val1.bits[1] = 0x55CB8D15;
val1.bits[0] = 0xD7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000005;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -5,5000000000000000000000000000
val1.bits[2] = 0xB1B6EF06;
val1.bits[1] = 0x55CB8D15;
val1.bits[0] = 0xD8000000;
val_ans.bits[3] = 0x80000000;  // -6
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000006;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -5,5000000000000000000000000001
val1.bits[2] = 0xB1B6EF06;
val1.bits[1] = 0x55CB8D15;
val1.bits[0] = 0xD8000001;
val_ans.bits[3] = 0x80000000;  // -6
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000006;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -6,4999999999999999999999999999
val1.bits[2] = 0xD206BD64;
val1.bits[1] = 0x93F08F76;
val1.bits[0] = 0xE7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -6
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000006;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -6,5000000000000000000000000000
val1.bits[2] = 0xD206BD64;
val1.bits[1] = 0x93F08F76;
val1.bits[0] = 0xE8000000;
val_ans.bits[3] = 0x80000000;  // -6
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000006;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -6,5000000000000000000000000001
val1.bits[2] = 0xD206BD64;
val1.bits[1] = 0x93F08F76;
val1.bits[0] = 0xE8000001;
val_ans.bits[3] = 0x80000000;  // -7
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000007;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,4999999999999999999999999999
val1.bits[2] = 0xF2568BC2;
val1.bits[1] = 0xD21591D7;
val1.bits[0] = 0xF7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -7
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000007;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,5000000000000000000000000000
val1.bits[2] = 0xF2568BC2;
val1.bits[1] = 0xD21591D7;
val1.bits[0] = 0xF8000000;
val_ans.bits[3] = 0x80000000;  // -8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,5000000000000000000000000001
val1.bits[2] = 0xF2568BC2;
val1.bits[1] = 0xD21591D7;
val1.bits[0] = 0xF8000001;
val_ans.bits[3] = 0x80000000;  // -8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -8,500000000000000000000000000
val1.bits[2] = 0x1B770903;
val1.bits[1] = 0x4E6C4205;
val1.bits[0] = 0xB4000000;
val_ans.bits[3] = 0x80000000;  // -8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -8,500000000000000000000000000
val1.bits[2] = 0x1B770903;
val1.bits[1] = 0x4E6C4205;
val1.bits[0] = 0xB4000000;
val_ans.bits[3] = 0x80000000;  // -8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -8,500000000000000000000000000
val1.bits[2] = 0x1B770903;
val1.bits[1] = 0x4E6C4205;
val1.bits[0] = 0xB4000000;
val_ans.bits[3] = 0x80000000;  // -8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -9,500000000000000000000000000
val1.bits[2] = 0x1EB2373F;
val1.bits[1] = 0xEE3CC242;
val1.bits[0] = 0x9C000000;
val_ans.bits[3] = 0x80000000;  // -10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -9,500000000000000000000000000
val1.bits[2] = 0x1EB2373F;
val1.bits[1] = 0xEE3CC242;
val1.bits[0] = 0x9C000000;
val_ans.bits[3] = 0x80000000;  // -10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -9,500000000000000000000000000
val1.bits[2] = 0x1EB2373F;
val1.bits[1] = 0xEE3CC242;
val1.bits[0] = 0x9C000000;
val_ans.bits[3] = 0x80000000;  // -10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80090000;  // -0,123456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80080000;  // -1,23456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80070000;  // -12,3456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -12
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000C;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80060000;  // -123,456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -123
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000007B;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80050000;  // -1234,56789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -1235
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000004D3;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80040000;  // -12345,6789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -12346
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000303A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80030000;  // -123456,789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -123457
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0001E241;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80020000;  // -1234567,89
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -1234568
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0012D688;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80010000;  // -12345678,9
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -12345679
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00BC614F;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

